// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveBasefrontLeftMotor;
std::shared_ptr<SpeedController> RobotMap::driveBasefrontRightMotor;
std::shared_ptr<SpeedController> RobotMap::driveBasebackLeftMotor;
std::shared_ptr<SpeedController> RobotMap::driveBasebackRightMotor;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveBasefrontLeftMotor.reset(new Spark(3));
    lw->AddActuator("driveBase", "frontLeftMotor", std::static_pointer_cast<Spark>(driveBasefrontLeftMotor));
    
    driveBasefrontRightMotor.reset(new Spark(1));
    lw->AddActuator("driveBase", "frontRightMotor", std::static_pointer_cast<Spark>(driveBasefrontRightMotor));
    
    driveBasebackLeftMotor.reset(new Spark(2));
    lw->AddActuator("driveBase", "backLeftMotor", std::static_pointer_cast<Spark>(driveBasebackLeftMotor));
    
    driveBasebackRightMotor.reset(new Spark(0));
    lw->AddActuator("driveBase", "backRightMotor", std::static_pointer_cast<Spark>(driveBasebackRightMotor));
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
